package main;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTextField;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.concurrent.TimeUnit;

//import javax.swing.Timer;
import javax.swing.SwingConstants;
import java.util.TimerTask;
import java.util.Locale;
import java.util.Timer;
import javax.swing.JLayeredPane;
import org.eclipse.wb.swing.FocusTraversalOnArray;
import java.awt.Component;
import java.awt.SystemColor;
import java.text.NumberFormat;
import javax.swing.JCheckBox;

public class JavaBoneClickerV2 {
	
	static Timer timer = new Timer();
	static Thread thread1 = new Thread();
	
	public class Delay extends Thread {
		
		@Override
		public void run() {
				try {
					Thread.sleep(2000);
						btnReset.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
						btnReset.setText("Reset");
						btnResetClicked = false;
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	
	//images
	ImageIcon backdrop = new ImageIcon(getClass().getClassLoader().getResource("StrIpedBackgroundLIght.png"));
	ImageIcon tier0Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneTransparent.png"));
	ImageIcon tier1Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT1Transparent.png"));
	ImageIcon tier2Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT2Transparent.png"));
	ImageIcon tier3Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT3Transparent.png"));
	ImageIcon tier4Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT4Transparent.png"));
	ImageIcon tier5Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT5Transparent.png"));
	ImageIcon tier6Icon = new ImageIcon(getClass().getClassLoader().getResource("BoneT6Transparent.png"));
	
	//math variables and large values
	static MathContext round4 = new MathContext(4, RoundingMode.FLOOR);
	static BigDecimal k = BigDecimal.valueOf(Math.pow(10, 3));
	static BigDecimal m = BigDecimal.valueOf(Math.pow(10, 6));
	static BigDecimal b = BigDecimal.valueOf(Math.pow(10, 9));
	static BigDecimal t = BigDecimal.valueOf(Math.pow(10, 12));
	static BigDecimal q = BigDecimal.valueOf(Math.pow(10, 15));
	static BigDecimal qi = BigDecimal.valueOf(Math.pow(10, 18));
	static BigDecimal s = BigDecimal.valueOf(Math.pow(10, 21));
	static BigDecimal se = BigDecimal.valueOf(Math.pow(10, 24));
	static BigDecimal oct = BigDecimal.valueOf(Math.pow(10, 27));
	static BigDecimal n = BigDecimal.valueOf(Math.pow(10, 30));
	static BigDecimal dec = BigDecimal.valueOf(Math.pow(10, 33));
	static BigDecimal aa = BigDecimal.valueOf(Math.pow(10, 36));
	static BigDecimal bb = BigDecimal.valueOf(Math.pow(10, 39));
	static BigDecimal cc = BigDecimal.valueOf(Math.pow(10, 42));
	
	static NumberFormat nf = NumberFormat.getInstance();
	static BigDecimal formattedBones;
	
	//initial declarations
	JLabel lblShop;
	
	JButton btnBuy1;
	JButton btnBuy2;
	JButton btnBuy3;
	JButton btnBuy4;
	JButton btnBuy5;
	
	JButton btnUpgradeUnit1;
	JButton btnUpgradeUnit2;
	JButton btnUpgradeUnit3;
	JButton btnUpgradeUnit4;
	JButton btnUpgradeUnit5;
	
	JLabel btnAddBones;
	JButton btnUpgradeBone;

	//stat-related
	JPanel panelStats;
	JButton btnLabelStatsClose;
	JLabel lblClicksStat;
	JLabel lblBonesSpent;
	JLabel lblBonesProduced;
	
	//main labels
	private JFrame frame;
	JLabel lblBones;
	JLabel lblBPS;
	JLabel lblStats;
	
	//holy milk-related
	JPanel panelReset;
	JButton btnReset;
	JPanel panelHolyMilk;
	JLabel lblHolyMilkAmount;
	static JLabel lblHolyMilkText1;
	static JLabel lblHolyMilkText2;

	 //Tier costs
	static BigDecimal tier1Cost = BigDecimal.valueOf(200);
	static BigDecimal tier2Cost = BigDecimal.valueOf(2000);
	static BigDecimal tier3Cost = BigDecimal.valueOf(10000);
	static BigDecimal tier4Cost = BigDecimal.valueOf(100000);
	static BigDecimal tier5Cost = BigDecimal.valueOf(1000000);
	static BigDecimal tier6Cost = BigDecimal.valueOf(10000000);
	
	//bones/click for tiers
	static BigDecimal tier0Increment = BigDecimal.valueOf(1);
	static BigDecimal tier1Increment = BigDecimal.valueOf(2);
	static BigDecimal tier2Increment = BigDecimal.valueOf(5);
	static BigDecimal tier3Increment = BigDecimal.valueOf(10);
	static BigDecimal tier4Increment = BigDecimal.valueOf(20);
	static BigDecimal tier5Increment = BigDecimal.valueOf(50);
	static BigDecimal tier6Increment = BigDecimal.valueOf(100);
	
	static //initial data ----------------------------------------------
	BigDecimal bones = BigDecimal.valueOf(0);
	
	//holy milk-related values
//	static BigDecimal HolyMilk.possiblePints = BigDecimal.valueOf(0);
//	static BigDecimal HolyMilk.actualPints = BigDecimal.valueOf(0);
//	static BigDecimal bonesPerPint = BigDecimal.valueOf(1000000000);
//	static final double bonusPerPint = 0.02;
	
	//stat data
//	static BigDecimal totalBonus = BigDecimal.valueOf(0);
//	static BigDecimal totalSpent = BigDecimal.valueOf(0);
//	static BigDecimal totalProduced = BigDecimal.valueOf(0);
//	int totalClicks = 0;
//	int totalResets = 0;
	static int ticks = 0;
	
	//booleans
		boolean timerOn = false;
		boolean statsOn = false;
		boolean holyMilkOn = false;
		boolean btnResetClicked = false;
	//------------------------------------------------------------
	//larger variables
		
		public static class StatData {
			static BigDecimal totalBonus = BigDecimal.valueOf(0);
			static BigDecimal totalSpent = BigDecimal.valueOf(0);
			static BigDecimal totalProduced = BigDecimal.valueOf(0);
			static int totalClicks = 0;
			static int totalResets = 0;
		}
		
		public static class HolyMilk {
			static BigDecimal possiblePints = new BigDecimal(0);
			static BigDecimal actualPints = new BigDecimal(0);
			static BigDecimal bonesPerPint = BigDecimal.valueOf(Math.pow(10, 9));
			static double bonusPerPint = 0.02;
			
			public static void updateHolyMilk() {
				HolyMilk.possiblePints = bones.divide(bonesPerPint).setScale(0, RoundingMode.DOWN);
					lblHolyMilkText1.setText("Reset to gain " + formatNumber(HolyMilk.possiblePints, false) + " more pints");
				    lblHolyMilkText2.setText("(You will gain a +" + formatNumber(HolyMilk.possiblePints.multiply(BigDecimal.valueOf(2)), false) + "% bonus)");
				//System.out.println("Possible Pints: " + HolyMilk.possiblePints);
				//System.out.println("Actual Pints: " + HolyMilk.actualPints);
			}
		}
		
		public class UnitType {
			String name;
			BigDecimal defaultCost;
			BigDecimal currentCost;
			BigDecimal bps;
			int units;
			BigDecimal defaultUpgradeCost;
			BigDecimal currentUpgradeCost;
			BigDecimal multiplier;
			int level;
			
			UnitType(String name, BigDecimal defaultCost, BigDecimal defaultUpgradeCost, 
					BigDecimal bps, BigDecimal multiplier, int units, int level) {
				
				setName(name);
				setDefaultCost(defaultCost);
				this.currentCost = this.defaultCost;
				setBPS(bps);
				setUnits(units);
				setDefaultUpgradeCost(defaultUpgradeCost);
				this.currentUpgradeCost = this.defaultUpgradeCost;
				setMultiplier(multiplier);
				setLevel(level);
			}		
			public void setName(String name) {
				this.name = name;
			}
			public void setDefaultCost(BigDecimal defaultCost) {
				this.defaultCost = defaultCost;
			}
			public void setBPS(BigDecimal bps) {
				this.bps = bps;
			}
			public void setUnits(int units) {
				this.units = units;
			}
			public void setDefaultUpgradeCost(BigDecimal defaultUpgradeCost) {
				this.defaultUpgradeCost = defaultUpgradeCost;
			}
			public void setMultiplier(BigDecimal multiplier) {
				this.multiplier = multiplier;
			}
			public void setLevel(int level) {
				this.level = level;
			}
		}
		
	//arguments: String name, BigDecimal defaultCost, BigDecimal defaultUpgradeCost, BigDecimal bps, BigDecimal multiplier, int units, int level 
		UnitType unit1 = new UnitType("Milk", new BigDecimal(10), new BigDecimal(100), new BigDecimal(0.5), new BigDecimal(1), 0, 25);
		UnitType unit2 = new UnitType("Calcium", new BigDecimal(100), new BigDecimal(1000), new BigDecimal(2), new BigDecimal(1), 0, 0);
		UnitType unit3 = new UnitType("Skeleton", new BigDecimal(1000), new BigDecimal(10000), new BigDecimal(10), new BigDecimal(1), 0, 0);
		UnitType unit4 = new UnitType("Graveyard", new BigDecimal(10000), new BigDecimal(100000), new BigDecimal(50), new BigDecimal(1), 0, 0);
		UnitType unit5 = new UnitType("Hell", new BigDecimal(100000), new BigDecimal(1000000), new BigDecimal(100), new BigDecimal(1), 0, 0);
		
		public class Tier {
			String name;
			ImageIcon icon;
			BigDecimal cost;
			BigDecimal increment;
			
			Tier currentTier;
			Tier nextTier;
			
			Tier(String name, ImageIcon icon, BigDecimal cost, BigDecimal increment) {
				
				setName(name);
				setIcon(icon);
				setCost(cost);
				setIncrement(increment);
			}
			
			//set methods
			public void setName(String name) {
				this.name = name;
			}
			public void setIcon(ImageIcon icon) {
				this.icon = icon;
			}
			public void setCost(BigDecimal cost) {
				this.cost = cost;
			}
			public void setIncrement(BigDecimal increment) {
				this.increment = increment;
			}
			
			//get methods
			public void setNextTier(Tier nextTier) {
				this.nextTier = nextTier;
			}
			
			public ImageIcon getIcon(Tier tier) {
				//System.out.println(currentTier.icon);
				return tier.icon;
			}
			
			public Tier getCurrentTier() {
				return currentTier;
			}
		}
		
		Tier tier0 = new Tier("Tier 0", tier0Icon, new BigDecimal(0), new BigDecimal(1));
		Tier tier1 = new Tier("Tier 1", tier1Icon, new BigDecimal(100), new BigDecimal(2));
		Tier tier2 = new Tier("Tier 2", tier2Icon, new BigDecimal(500), new BigDecimal(5));
		Tier tier3 = new Tier("Tier 3", tier3Icon, new BigDecimal(1000), new BigDecimal(10));
		Tier tier4 = new Tier("Tier 4", tier4Icon, new BigDecimal(2500), new BigDecimal(25));
		Tier tier5 = new Tier("Tier 5", tier5Icon, new BigDecimal(10000), new BigDecimal(50));
		Tier tier6 = new Tier("Tier 6", tier6Icon, new BigDecimal(50000), new BigDecimal(100));
		
		Tier currentTier = tier0;
		Tier nextTier = tier1;
		BigDecimal currentTierCost = tier1Cost;
		BigDecimal currentIncrement = tier0.increment;
		
	BigDecimal perSec = ( 
			     (BigDecimal.valueOf(unit1.units).multiply(unit1.bps).multiply(unit1.multiplier)) 
			.add (BigDecimal.valueOf(unit2.units).multiply(unit2.bps).multiply(unit2.multiplier)) 
			.add (BigDecimal.valueOf(unit3.units).multiply(unit3.bps).multiply(unit3.multiplier)) 
			.add (BigDecimal.valueOf(unit4.units).multiply(unit4.bps).multiply(unit4.multiplier)) 
			.add (BigDecimal.valueOf(unit5.units).multiply(unit5.bps).multiply(unit5.multiplier))
			);
	
	/**
	 * Launch the application.
	 */
	
	public static void main(String[] args) {
		
		//lblBones.setText("You have " + formatNumber(bones, false) + "Bones");
		
		System.out.println("bones: " + bones);
		
		//nf.getCompactNumberInstance(Locale.CANADA, NumberFormat.Style.SHORT);
		nf.setMaximumFractionDigits(0);
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					JavaBoneClickerV2 window = new JavaBoneClickerV2();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	/**
	 * Create the application.
	 */
	
	public JavaBoneClickerV2() {
				
		startTimer();
		initialize();
 		preInitialize();
	}

	/**
	 * Initialize the contents of the frame.
	 * @return 
	 */
	
	/*public void updateTimer() {
		
		if(timerOn == false) {
			timerOn = true;
		}
		else if(timerOn == true) {
			timer.stop();
		}
		
		double speed = 1/perSec*1000;
		timerSpeed = (int) Math.round(speed);
		
		System.out.println("Unrounded timer speed: " + speed + " " + timerSpeed);
		
		startTimer();
		System.out.println("x");
		timer.start();
		System.out.println("y");
		
	}
	
	public void startTimer() {
		
		timer = new Timer(timerSpeed, new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				bones++;
				lblbones.setText("You have " + bones + " bones.");
				
				
			}
		});
	}
	*/
	public void preInitialize() {
		
		unit1.multiplier = BigDecimal.valueOf(2).pow(unit1.level);
		unit2.multiplier = BigDecimal.valueOf(2).pow(unit2.level);
		unit3.multiplier = BigDecimal.valueOf(2).pow(unit3.level);
		unit4.multiplier = BigDecimal.valueOf(2).pow(unit4.level);
		unit5.multiplier = BigDecimal.valueOf(2).pow(unit5.level);
		
		lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
		
		btnBuy1.setText("<html>Buy " + unit1.name + " (" + unit1.units + ")<br>" + formatNumber(unit1.currentCost, false) + " Bones");
		btnBuy2.setText("<html>Buy " + unit2.name + " (" + unit2.units + ")<br>" + formatNumber(unit2.currentCost, false) + " Bones");
		btnBuy3.setText("<html>Buy " + unit3.name + " (" + unit3.units + ")<br>" + formatNumber(unit3.currentCost, false) + " Bones");
		btnBuy4.setText("<html>Buy " + unit4.name + " (" + unit4.units + ")<br>" + formatNumber(unit4.currentCost, false) + " Bones");
		btnBuy5.setText("<html>Buy " + unit5.name + " (" + unit5.units + ")<br>" + formatNumber(unit5.currentCost, false) + " Bones");
		
		btnUpgradeUnit1.setText("<html>Upgrade<br> (lvl " + unit1.level + ")<br> " + formatNumber(unit1.currentUpgradeCost, false) + " Bones");
		btnUpgradeUnit2.setText("<html>Upgrade<br> (lvl " + unit2.level + ")<br> " + formatNumber(unit2.currentUpgradeCost, false) + " Bones");
		btnUpgradeUnit3.setText("<html>Upgrade<br> (lvl " + unit3.level + ")<br> " + formatNumber(unit3.currentUpgradeCost, false) + " Bones");
		btnUpgradeUnit4.setText("<html>Upgrade<br> (lvl " + unit4.level + ")<br> " + formatNumber(unit4.currentUpgradeCost, false) + " Bones");
		btnUpgradeUnit5.setText("<html>Upgrade<br> (lvl " + unit5.level + ")<br> " + formatNumber(unit5.currentUpgradeCost, false) + " Bones");
		
		btnUpgradeBone.setText("<html>Upgrade Bone<br>" + formatNumber(tier1Cost, false) + " Bones");
		
	}
	
	public void startTimer() {
		timer.scheduleAtFixedRate(new TimerTask() {
			@Override
			public void run() { 
				bones = bones.add( 
						(perSec.add
						 (perSec.multiply(StatData.totalBonus)) )
						.divide(BigDecimal.valueOf(10)) 
						);
			increaseBonesProduced(perSec.divide(BigDecimal.valueOf(10)));
				lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
				HolyMilk.updateHolyMilk();
				updateBtnUpgradeBone();
				updateBtnBuy(unit1, btnBuy1);
				updateBtnUpgrade(unit1, btnUpgradeUnit1);
				updateBtnBuy(unit2, btnBuy2);
				updateBtnUpgrade(unit2, btnUpgradeUnit2);
				updateBtnBuy(unit3, btnBuy3);
				updateBtnUpgrade(unit3, btnUpgradeUnit3);
				updateBtnBuy(unit4, btnBuy4);
				updateBtnUpgrade(unit4, btnUpgradeUnit4);
				updateBtnBuy(unit5, btnBuy5);
				updateBtnUpgrade(unit5, btnUpgradeUnit5);
				ticks++;
			}
		}, 1000, 100);
	}
	
	public static String formatNumber(BigDecimal num, boolean isBPS) {
		
		String formatted = "";
		if (isBPS == true & num.compareTo(k) < 0) {
				formatted = ""+num.setScale(1, RoundingMode.DOWN)+"";
		}
		else if (num.compareTo(BigDecimal.ZERO) >= 0 & num.compareTo(k) < 0) {
				formatted = ""+num.setScale(0, RoundingMode.DOWN)+"";
		}
		else if (num.compareTo(k) >= 0 & num.compareTo(m) < 0) {
			num = num.divide(k);
			num = num.round(round4);
			formatted = num.toPlainString() + "K";		
		}	
		else if (num.compareTo(m) >= 0 & num.compareTo(b) < 0) {
			num = num.divide(m);
			num = num.round(round4);
			formatted = num.toPlainString() + "M";
		}
		else if (num.compareTo(b) >= 0 & num.compareTo(t) < 0) {
			num = num.divide(b);
			num = num.round(round4);
			formatted = num.toPlainString() + "B";
		}
		else if (num.compareTo(t) >= 0 & num.compareTo(q) < 0) {
			num = num.divide(t);
			num = num.round(round4);
			formatted = num.toPlainString() + "T";
		}
		else if (num.compareTo(q) >= 0 & num.compareTo(qi) < 0) {
			num = num.divide(q);
			num = num.round(round4);
			formatted = num.toPlainString() + "Q";
		}
		else if (num.compareTo(qi) >= 0 & num.compareTo(s) < 0) {
			num = num.divide(qi);
			num = num.round(round4);
			formatted = num.toPlainString() + "Qi";
		}
		else if (num.compareTo(s) >= 0 & num.compareTo(se) < 0) {
			num = num.divide(s);
			num = num.round(round4);
			formatted = num.toPlainString() + "S";
		}
		else if (num.compareTo(se) >= 0 & num.compareTo(oct) < 0) {
			num = num.divide(se);
			num = num.round(round4);
			formatted = num.toPlainString() + "Se";
		}
		else if (num.compareTo(oct) >= 0 & num.compareTo(n) < 0) {
			num = num.divide(oct);
			num = num.round(round4);
			formatted = num.toPlainString() + "Oct";
		}
		else if (num.compareTo(n) >= 0 & num.compareTo(dec) < 0) {
			num = num.divide(n);
			num = num.round(round4);
			formatted = num.toPlainString() + "N";
		}
		else if (num.compareTo(dec) >= 0 & num.compareTo(aa) < 0) {
			num = num.divide(dec);
			num = num.round(round4);
			formatted = num.toPlainString() + "Dec";
		}
		else if (num.compareTo(aa) >= 0 & num.compareTo(bb) < 0) {
			num = num.divide(aa);
			num = num.round(round4);
			formatted = num.toPlainString() + "Aa";
		}
		else if (num.compareTo(bb) >= 0 & num.compareTo(cc) < 0) {
			num = num.divide(bb);
			num = num.round(round4);
			formatted = num.toPlainString() + "Bb";
		}
		return formatted;
	}
	
	public void updateBPS() {
		perSec = (
				(BigDecimal.valueOf(unit1.units).multiply(unit1.bps).multiply(unit1.multiplier)) 
				.add (BigDecimal.valueOf(unit2.units).multiply(unit2.bps).multiply(unit2.multiplier)) 
				.add (BigDecimal.valueOf(unit3.units).multiply(unit3.bps).multiply(unit3.multiplier)) 
				.add (BigDecimal.valueOf(unit4.units).multiply(unit4.bps).multiply(unit4.multiplier)) 
				.add (BigDecimal.valueOf(unit5.units).multiply(unit5.bps).multiply(unit5.multiplier))
				);
	}
	
	public BigDecimal increaseUnitCost(BigDecimal newCost) {
		newCost = (newCost.add (newCost.divide (BigDecimal.valueOf(2))));
		System.out.println("new cost unrounded: " + newCost);
		newCost = newCost.setScale(0, RoundingMode.DOWN);
		System.out.println("new cost rounded: " + newCost);
		return newCost;
	}
	
	public BigDecimal increaseMultiplier(BigDecimal multiplier) {
		multiplier = multiplier.multiply(BigDecimal.valueOf(2));
		return multiplier;
	}
	
	public BigDecimal increaseUpgradeCost(BigDecimal unit1CurrentUpgradeCost2) {
		BigDecimal newCost = (unit1CurrentUpgradeCost2.multiply(BigDecimal.valueOf(10)));
		return newCost;
	}
	
	public void increaseBonesSpent(BigDecimal unit1CurrentCost) {
		StatData.totalSpent = StatData.totalSpent.add(unit1CurrentCost);
		lblBonesSpent.setText("Total Bones spent: " + formatNumber(StatData.totalSpent, false));
	}
	
	public void increaseBonesProduced(BigDecimal increase) {
		StatData.totalProduced = StatData.totalProduced.add(increase);
		lblBonesProduced.setText("You've produced " + formatNumber(StatData.totalProduced.setScale(0, RoundingMode.DOWN), false) + " bones");
	}
	

	//Set buttons to enabled or disabled based on current amount of bones
	
	public void updateBtn(JButton btn) {
		if (bones.compareTo(unit1.currentCost) >= 0) {
			btnBuy1.setEnabled(true);
		}
		else {
			btnBuy1.setEnabled(false);
		}
	}
	public void updateBtnUpgradeBone() {
		if (bones.compareTo(currentTier.cost) >= 0 & nextTier != null) {	
			btnUpgradeBone.setEnabled(true);
			}
		else {
			btnUpgradeBone.setEnabled(false);
		}
	}
//	public void updateBtn1() {
//		if (bones.compareTo(unit1.currentCost) >= 0) {
//			btnBuy1.setEnabled(true);
//		}
//		else {
//			btnBuy1.setEnabled(false);
//		}
//	}
//	
//	public void updateBtnUpgrade1() {
//		if (bones.compareTo(unit1.currentUpgradeCost) >= 0) {
//			btnUpgradeUnit1.setEnabled(true);
//		}
//		else {
//			btnUpgradeUnit1.setEnabled(false);
//		}
//	}

	public void updateBtnBuy(UnitType unit, JButton btn) {
		if (bones.compareTo(unit.currentCost) >= 0) {
			btn.setEnabled(true);
		}
		else {
			btn.setEnabled(false);
		}
	}
	
	public void updateBtnUpgrade(UnitType unit, JButton btn) {
		if (bones.compareTo(unit.currentUpgradeCost) >= 0) {
			btn.setEnabled(true);
		}
		else {
			btn.setEnabled(false);
		}
	}

	
	public void unitBuyReactToClick(UnitType unit, JButton btn) {
		if (bones.setScale(0, RoundingMode.DOWN).compareTo(unit.currentCost.setScale(0, RoundingMode.DOWN)) >= 0) {
			
			//update stats
			increaseBonesSpent(unit.currentCost);
			
			//update lblBones 
			bones = bones.subtract(unit.currentCost);
			lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
			
			//update values 
			unit.units++;
			unit.currentCost = increaseUnitCost(unit.currentCost);
			btn.setText("<html>Buy " + unit.name +  " (" + unit.units + ")<br>" + formatNumber(unit.currentCost, false) + " Bones");
			
			//update bps
			updateBPS();
			lblBPS.setText(formatNumber(perSec, true) + " bones/sec");
		}
		else if ((bones.setScale(0, RoundingMode.DOWN).compareTo(unit.currentCost.setScale(0, RoundingMode.DOWN))) < 0) {
			System.out.println("You need at least " + nf.format(unit.currentCost) + " Bones for that.");
		}
	}
	
	public void unitUpgradeReactToClick(UnitType unit, JButton btn) {
		if (bones.setScale(0, RoundingMode.DOWN).compareTo(unit.currentUpgradeCost.setScale(0, RoundingMode.DOWN)) >= 0) {
			
			//update stats
			increaseBonesSpent(unit.currentUpgradeCost);
			
			//update bones
			bones = bones.subtract(unit.currentUpgradeCost);
			lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
			
			//update cost
			unit.currentUpgradeCost = increaseUpgradeCost(unit.currentUpgradeCost);
			btn.setText("<html>Upgrade<br> (lvl " + unit.level + ")<br> " + formatNumber(unit.currentUpgradeCost, false) + " Bones");
			
			//update values
			unit.level++;
			unit.multiplier = increaseMultiplier(unit.multiplier);
			updateBPS();
			lblBPS.setText(formatNumber(perSec, true) + " bones/sec");
		}
		else if ((bones.setScale(0, RoundingMode.DOWN).compareTo(unit.currentUpgradeCost.setScale(0, RoundingMode.DOWN))) < 0) {
			System.out.println("You need at least " + nf.format(unit.currentUpgradeCost) + "Bones for that");
		}
	}
	
	public void upgradeBoneReactToClick(Tier tier) {
			
			//update tier values
			currentIncrement = tier.increment;
			
			//change icon & buy label
			//System.out.println("currentTier: " + currentTier);
			btnAddBones.setIcon(currentTier.getIcon(currentTier));
			btnUpgradeBone.setText("<html>Upgrade Bone<br>" + formatNumber(nextTier.cost, false) + " Bones");	
			//update bones
			bones = bones.subtract(tier.cost);
			lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
			
			//update stats
			increaseBonesSpent(tier.cost);
		}

	public void initialize() {
		frame = new JFrame();
		frame.getContentPane().setBackground(Color.WHITE);
		frame.setBounds(100, 100, 1174, 720);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		
		btnLabelStatsClose = new JButton("x");
		btnLabelStatsClose.setFocusPainted(false);
		btnLabelStatsClose.setBackground(Color.WHITE);
		btnLabelStatsClose.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnLabelStatsClose.setBounds(258, 0, 42, 42);
		btnLabelStatsClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				panelStats.setVisible(false);
				statsOn = false;
			}
		});
		
		panelStats = new JPanel();
		panelStats.setVisible(false);
		panelStats.setForeground(new Color(210, 105, 30));
		panelStats.setBounds(31, 177, 300, 255);
		frame.getContentPane().add(panelStats);
		panelStats.setBackground(Color.WHITE);
		panelStats.setLayout(null);
		panelStats.add(btnLabelStatsClose);
		
		
		
		lblClicksStat = new JLabel("You've clicked 0 times");
		lblClicksStat.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		lblClicksStat.setBounds(20, 95, 259, 26);
		panelStats.add(lblClicksStat);
		
		lblBonesSpent = new JLabel("Total Bones spent: 0");
		lblBonesSpent.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		lblBonesSpent.setBounds(20, 120, 259, 32);
		panelStats.add(lblBonesSpent);
		
		lblBonesProduced = new JLabel("Total Bones produced: 0");
		lblBonesProduced.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		lblBonesProduced.setBounds(20, 151, 259, 26);
		panelStats.add(lblBonesProduced);
		
		lblStats = new JLabel("Stats");
		lblStats.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 30));
		lblStats.setBounds(106, 25, 85, 42);
		panelStats.add(lblStats);
		
		JLabel lblTotalResetsStat = new JLabel("Total resets: 0");
		lblTotalResetsStat.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		lblTotalResetsStat.setBounds(20, 179, 206, 25);
		panelStats.add(lblTotalResetsStat);
				
				/* btnAddBones.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						bones = bones.add( 
										(currentIncrement) .add (currentIncrement.multiply(totalBonus) ) 
										).setScale(0, RoundingMode.DOWN);
						
						updateHolyMilk();
						
						
						totalClicks++;
						lblClicksStat.setText("You've clicked " + totalClicks + " times");
						lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
					}
				});*/
		
		JPanel shopPanel = new JPanel();
		shopPanel.setBounds(795, 0, 363, 681);
		frame.getContentPane().add(shopPanel);
		shopPanel.setLayout(null);
		shopPanel.setBackground(new Color(255,229,204,100));
		
		
		btnBuy1 = new JButton("<html>Buy Milk (0)<br>" + unit1.currentCost + " Bones");
		btnBuy1.setBounds(23, 134, 184, 73);
		shopPanel.add(btnBuy1);
		btnBuy1.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
		btnBuy1.setBackground(Color.WHITE);
		btnBuy1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				unitBuyReactToClick(unit1, btnBuy1);
			}
		});
		btnBuy1.setFocusPainted(false);
		
		
		btnUpgradeUnit1 = new JButton("<html>Upgrade<br> (lvl " + unit1.level + ")<br> " + unit1.currentUpgradeCost + " Bones");
		btnUpgradeUnit1.setBounds(208, 134, 134, 73);
		shopPanel.add(btnUpgradeUnit1);
		btnUpgradeUnit1.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
		btnUpgradeUnit1.setBackground(Color.WHITE);
		btnUpgradeUnit1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				unitUpgradeReactToClick(unit1, btnUpgradeUnit1);
			}
		});
		btnUpgradeUnit1.setFocusPainted(false);
		
			
			btnBuy2 = new JButton("<html>Buy Calcium (0)<br>&emsp;" + unit2.currentCost + " Bones");
			btnBuy2.setBounds(23, 224, 184, 73);
			shopPanel.add(btnBuy2);
			btnBuy2.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnBuy2.setBackground(Color.WHITE);
			btnBuy2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					unitBuyReactToClick(unit2, btnBuy2);
					System.out.println(unit2.name);
				}
			});
			btnBuy2.setFocusPainted(false);
			
			
			btnUpgradeUnit2 = new JButton("<html>Upgrade<br> (lvl 0)<br> " + unit2.currentUpgradeCost + " Bones");
			btnUpgradeUnit2.setBounds(208, 224, 134, 73);
			shopPanel.add(btnUpgradeUnit2);
			btnUpgradeUnit2.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnUpgradeUnit2.setBackground(Color.WHITE);
			btnUpgradeUnit2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					unitUpgradeReactToClick(unit2, btnUpgradeUnit2);
					}
				});
			btnUpgradeUnit2.setFocusPainted(false);
			
			
			
			btnBuy3 = new JButton("<html>Buy Skeleton (0)<br>&emsp;" + unit3.currentCost + " Bones");
			btnBuy3.setBounds(23, 314, 184, 73);
			shopPanel.add(btnBuy3);
			btnBuy3.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnBuy3.setBackground(Color.WHITE);
			btnBuy3.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					unitBuyReactToClick(unit3, btnBuy3);
				}
			});
			btnBuy3.setFocusPainted(false);
			
			
			btnUpgradeUnit3 = new JButton("<html>Upgrade<br> (lvl 0)<br> " + unit3.currentUpgradeCost + " Bones");
			btnUpgradeUnit3.setBounds(208, 314, 134, 73);
			shopPanel.add(btnUpgradeUnit3);
			btnUpgradeUnit3.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnUpgradeUnit3.setBackground(Color.WHITE);
			btnUpgradeUnit3.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					unitUpgradeReactToClick(unit3, btnUpgradeUnit3);
				}
			});
			btnUpgradeUnit3.setFocusPainted(false);
			
			
			btnBuy4 = new JButton("<html>Buy Graveyard (0)<br>&emsp;" + unit4.currentCost + " Bones");
			btnBuy4.setBounds(23, 404, 184, 73);
			shopPanel.add(btnBuy4);
			btnBuy4.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnBuy4.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					unitBuyReactToClick(unit4, btnBuy4);
				}
			});
			
			
			
			btnBuy4.setFocusPainted(false);
			btnBuy4.setBackground(Color.WHITE);
			
			btnUpgradeUnit4 = new JButton("<html>Upgrade<br> (lvl 0)<br> " + unit4.currentUpgradeCost + " Bones");
			btnUpgradeUnit4.setBounds(208, 404, 134, 73);
			shopPanel.add(btnUpgradeUnit4);
			btnUpgradeUnit4.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnUpgradeUnit4.setBackground(Color.WHITE);
			btnUpgradeUnit4.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					unitUpgradeReactToClick(unit4, btnUpgradeUnit3);
				}
			});
			btnUpgradeUnit4.setFocusPainted(false);
			
			
			btnBuy5 = new JButton("<html>Buy Hell (0)<br>" + unit5.currentCost + " Bones");
			btnBuy5.setBounds(23, 494, 184, 73);
			shopPanel.add(btnBuy5);
			btnBuy5.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnBuy5.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					unitBuyReactToClick(unit5, btnBuy5);
				}
			});
			btnBuy5.setFocusPainted(false);
			btnBuy5.setBackground(Color.WHITE);
			
			btnUpgradeUnit5 = new JButton("<html>Upgrade<br> (lvl 0)<br> " + unit5.currentUpgradeCost + " Bones");
			btnUpgradeUnit5.setBounds(208, 494, 134, 73);
			shopPanel.add(btnUpgradeUnit5);
			btnUpgradeUnit5.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
			btnUpgradeUnit5.setBackground(Color.WHITE);
			btnUpgradeUnit5.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					unitUpgradeReactToClick(unit5, btnUpgradeUnit5);
				}
			});
			btnUpgradeUnit5.setFocusPainted(false);
			
			
			lblShop = new JLabel("Shop");
			lblShop.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 40));
			lblShop.setBounds(133, 50, 121, 46);
			shopPanel.add(lblShop);
		
				btnAddBones = new JLabel();
				btnAddBones.setBounds(393, 193, 300, 279);
				frame.getContentPane().add(btnAddBones);
				btnAddBones.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
							
							//update stats
							StatData.totalClicks++;
							lblClicksStat.setText("You've clicked " + StatData.totalClicks + " times");
							StatData.totalProduced = StatData.totalProduced.add(currentIncrement);
							lblBonesProduced.setText("You've produced " + formatNumber(StatData.totalProduced.setScale(0, RoundingMode.DOWN), false) + " bones");
							
							//add bones & update lbl
							bones = bones.add( 
											 (currentIncrement) .add (currentIncrement.multiply(StatData.totalBonus) ) 
											 ).setScale(0, RoundingMode.DOWN);
						
							HolyMilk.updateHolyMilk();
							lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
						}
					
				});
				btnAddBones.setBorder(null);
				btnAddBones.setIcon(tier0Icon);
		
		
		
		panelHolyMilk = new JPanel();
		panelHolyMilk.setVisible(false);
		panelHolyMilk.setBackground(Color.WHITE);
		panelHolyMilk.setBounds(294, 510, 470, 137);
		frame.getContentPane().add(panelHolyMilk);
		panelHolyMilk.setLayout(null);
		
	
		
		lblHolyMilkAmount = new JLabel("<html>You currently have 0 pints of Holy Milk<br>"
				+ "(+0.0%)");
		lblHolyMilkAmount.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		lblHolyMilkAmount.setBounds(10, 11, 392, 52);
		panelHolyMilk.add(lblHolyMilkAmount);
		
		JButton btnHolyMilkClose = new JButton("x");
		btnHolyMilkClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				panelHolyMilk.setVisible(false);
				holyMilkOn = false;
			}
		});
		btnHolyMilkClose.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
		btnHolyMilkClose.setFocusPainted(false);
		btnHolyMilkClose.setBackground(Color.WHITE);
		btnHolyMilkClose.setBounds(428, 0, 42, 42);
		panelHolyMilk.add(btnHolyMilkClose);
		
		lblHolyMilkText1 = new JLabel("Reset to gain 0 more pints");
		lblHolyMilkText1.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 18));
		lblHolyMilkText1.setBounds(182, 70, 278, 27);
		panelHolyMilk.add(lblHolyMilkText1);
		
		lblHolyMilkText2 = new JLabel("(You will gain a +0% bonus)");
		lblHolyMilkText2.setFont(new Font("Microsoft Sans Serif", Font.ITALIC, 15));
		lblHolyMilkText2.setBounds(189, 101, 271, 19);
		panelHolyMilk.add(lblHolyMilkText2);
		
		
		btnReset = new JButton("Reset");
		btnReset.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 20));
		btnReset.setFocusPainted(false);
		btnReset.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				if (HolyMilk.possiblePints.compareTo(BigDecimal.valueOf(100)) >= 0 ) {
					bones = BigDecimal.ZERO;
					lblBones.setText("You have " + bones + " Bones");
					perSec = BigDecimal.ZERO;
					lblBPS.setText(perSec + " Bones/sec");
					btnAddBones.setIcon(tier0Icon);
					
					currentIncrement = tier0Increment;
					currentTier = tier0;
					unit1.units = 0;
					unit2.units = 0;
					unit3.units = 0;
					unit4.units = 0;
					unit5.units = 0;
					unit1.level = 0;
					unit2.level = 0;
					unit3.level = 0;
					unit4.level = 0;
					unit5.level = 0;
					
					unit1.currentUpgradeCost = unit1.defaultUpgradeCost;
					unit2.currentUpgradeCost = unit2.defaultUpgradeCost;
					unit3.currentUpgradeCost = unit3.defaultUpgradeCost;
					unit4.currentUpgradeCost = unit4.defaultUpgradeCost;
					unit5.currentUpgradeCost = unit5.defaultUpgradeCost;
					btnUpgradeUnit1.setText("<html>Upgrade<br> (lvl " + unit1.level + ")<br> " + unit1.currentUpgradeCost + " Bones");
					btnUpgradeUnit2.setText("<html>Upgrade<br> (lvl " + unit2.level + ")<br> " + unit2.currentUpgradeCost + " Bones");
					btnUpgradeUnit3.setText("<html>Upgrade<br> (lvl " + unit3.level + ")<br> " + unit3.currentUpgradeCost + " Bones");
					btnUpgradeUnit4.setText("<html>Upgrade<br> (lvl " + unit4.level + ")<br> " + unit4.currentUpgradeCost + " Bones");
					btnUpgradeUnit5.setText("<html>Upgrade<br> (lvl " + unit5.level + ")<br> " + unit5.currentUpgradeCost + " Bones");
					unit1.currentCost = unit1.defaultCost;
					unit2.currentCost = unit2.defaultCost;
					unit3.currentCost = unit3.defaultCost;
					unit4.currentCost = unit4.defaultCost;
					unit5.currentCost = unit5.defaultCost;
					btnBuy1.setText("<html>Buy " + unit1.name + " (" + unit1.units + ")<br>" + unit1.currentCost + " Bones");
					btnBuy2.setText("<html>Buy " + unit2.name + "  (" + unit2.units + ")<br>" + unit2.currentCost + " Bones");
					btnBuy3.setText("<html>Buy " + unit3.name + " (" + unit3.units + ")<br>" + unit3.currentCost + " Bones");
					btnBuy4.setText("<html>Buy " + unit4.name + " (" + unit4.units + ")<br>" + unit4.currentCost + " Bones");
					btnBuy5.setText("<html>Buy " + unit5.name + " (" + unit5.units + ")<br>" + unit5.currentCost + " Bones");
					unit1.multiplier = BigDecimal.valueOf(1);
					unit2.multiplier = BigDecimal.valueOf(1);
					unit3.multiplier = BigDecimal.valueOf(1);
					unit4.multiplier = BigDecimal.valueOf(1);
					unit5.multiplier = BigDecimal.valueOf(1);
					
					updateBPS();
					preInitialize();
					
					//holy milk-related
					HolyMilk.actualPints = HolyMilk.actualPints.add(HolyMilk.possiblePints);
//					System.out.println("Possible Pints: " + HolyMilk.possiblePints);
//					System.out.println("Actual Pints: " + HolyMilk.actualPints);
					HolyMilk.possiblePints = BigDecimal.ZERO;
					StatData.totalBonus = HolyMilk.actualPints.multiply(BigDecimal.valueOf(HolyMilk.bonusPerPint));
//					System.out.println("Pints: " + HolyMilk.actualPints + " Bonus: " + StatData.totalBonus.multiply(BigDecimal.valueOf(100)) + "%");
					
					lblHolyMilkAmount.setText("<html>You currently have " + formatNumber(HolyMilk.actualPints, false) + " pints of Holy Milk<br>"
							+ "(" + "+" + formatNumber(StatData.totalBonus.multiply(BigDecimal.valueOf(100)), false) + "%" + ")");
					lblHolyMilkText1.setText("Reset to gain 0 more pints");
					lblHolyMilkText2.setText("(You will gain a +0% bonus)");
					
					StatData.totalResets++;
					
					lblTotalResetsStat.setText("Total resets: " + StatData.totalResets);
				}
				else if (HolyMilk.possiblePints.compareTo(BigDecimal.valueOf(100)) <= 0 & btnResetClicked != true){
					btnResetClicked = true;
					btnReset.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 15));
					btnReset.setText("<html>You need at least 100 pints!");
					
						Delay delay1 = new Delay();
						delay1.start();
					
				}
			
			}
		});
		btnReset.setBackground(new Color(255, 228, 181));
		btnReset.setBounds(10, 74, 159, 52);
		panelHolyMilk.add(btnReset);
		
		JPanel decorPanel1 = new JPanel();
		decorPanel1.setLayout(null);
		decorPanel1.setBackground(new Color(255, 240, 245, 100));
		decorPanel1.setBounds(0, 0, 256, 681);
		frame.getContentPane().add(decorPanel1);
		
		
		
		JButton btnStats = new JButton("Stats");
		btnStats.setBounds(35, 578, 190, 67);
		decorPanel1.add(btnStats);
		btnStats.setFont(new Font("Dialog", Font.PLAIN, 17));
		btnStats.setFocusPainted(false);
		btnStats.setBackground(Color.WHITE);
		
		
		
		JButton btnHolyMilk = new JButton("Reset for bonus");
		btnHolyMilk.setBounds(35, 495, 190, 67);
		decorPanel1.add(btnHolyMilk);
		btnHolyMilk.setFont(new Font("Dialog", Font.PLAIN, 17));
		btnHolyMilk.setBackground(Color.WHITE);
		btnHolyMilk.setFocusPainted(false);
		
		//Upgrades
		
		btnUpgradeBone = new JButton("<html>Upgrade Bone<br>" + tier1Cost + " Bones");
		btnUpgradeBone.setBounds(35, 34, 190, 73);
		decorPanel1.add(btnUpgradeBone);
		btnUpgradeBone.setFont(new Font("Dialog", Font.PLAIN, 17));
		btnUpgradeBone.setBackground(Color.WHITE);
		btnUpgradeBone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (currentTier == tier0) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier0.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier1;
						nextTier = tier2;
						upgradeBoneReactToClick(currentTier);
					}
				}
				else if (currentTier == tier1) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier1.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier2;
						nextTier = tier3;
						upgradeBoneReactToClick(currentTier);
					}
				}
				else if (currentTier == tier2) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier2.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier3;
						nextTier = tier4;
						upgradeBoneReactToClick(currentTier);
					}
				}
				else if (currentTier == tier3) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier3.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier4;
						nextTier = tier5;
						upgradeBoneReactToClick(currentTier);
					}
				}
				else if (currentTier == tier4) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier4.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier5;
						nextTier = tier6;
						upgradeBoneReactToClick(currentTier);
					}
				}
				else if (currentTier == tier5) {
					if (bones.setScale(0, RoundingMode.DOWN).compareTo(tier5.cost.setScale(0, RoundingMode.DOWN)) >= 0 ) {
						currentTier = tier6;
						nextTier = null;
						
						//update currentTier values
						currentIncrement = currentTier.increment;
						
						//change icon & buy label
						btnAddBones.setIcon(currentTier.getIcon(currentTier));
						btnUpgradeBone.setText("Max Level");
						
						//update bones
						bones = bones.subtract(currentTier.cost);
						lblBones.setText("You have " + formatNumber(bones, false) + " Bones");
						
						//update stats
						increaseBonesSpent(currentTier.cost);
					}
				}
			}
		});
		
		
		
		btnUpgradeBone.setFocusPainted(false);
		btnHolyMilk.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (holyMilkOn == false) {
					panelHolyMilk.setVisible(true);
					holyMilkOn = true;
				}
				else if (holyMilkOn == true) {
					panelHolyMilk.setVisible(false);
					holyMilkOn = false;
				}
			}
		});
		btnStats.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (statsOn == false) {
					panelStats.setVisible(true);
					statsOn = true;
				}
				else if (statsOn == true) {
					panelStats.setVisible(false);
					statsOn = false;
				}
			}
		});
		
		lblBPS = new JLabel("0 Bones/sec");
		lblBPS.setBounds(440, 81, 290, 41);
		frame.getContentPane().add(lblBPS);
		lblBPS.setForeground(Color.BLACK);
		lblBPS.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 30));
		
		
		
		
		lblBones = new JLabel("You have 0 Bones");
		lblBones.setBounds(370, 33, 415, 57);
		frame.getContentPane().add(lblBones);
		lblBones.setForeground(Color.BLACK);
		lblBones.setBackground(Color.WHITE);
		lblBones.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 35));
		
		
		JLabel lblBackdrop = new JLabel();
		lblBackdrop.setBounds(-57, -18, 1280, 720);
		frame.getContentPane().add(lblBackdrop);
		lblBackdrop.setIcon(backdrop);
		lblBackdrop.setLayout(null);
		
	}
}



